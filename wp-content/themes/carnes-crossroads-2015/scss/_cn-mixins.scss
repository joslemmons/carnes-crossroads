/* CN Mixins */

//============================================================
//
// arrow
//
// @param width           :  px, em
// @param height          :  px, em
// @param direction       :  up, down, left, right
// @param color           :  hex, rgb
//
//============================================================

@mixin triangle($width: 20px, $height: 20px, $direction: up, $color: red) {
  width: 0;
  height: 0;
  // Right
  @if $direction == right {
    border-top: $height / 2 solid transparent;
    border-bottom: $height / 2 solid transparent;
    border-left: $width solid $color;
  }
  // Left
  @if $direction == left {
    border-top: $height / 2 solid transparent;
    border-bottom: $height / 2 solid transparent;
    border-right: $width solid $color;
  }
  // Up
  @if $direction == up {
    border-left: $width / 2 solid transparent;
    border-right: $width / 2 solid transparent;
    border-bottom: $height solid $color;
  }
  // Down
  @if $direction == down {
    border-left: $width / 2 solid transparent;
    border-right: $width / 2 solid transparent;
    border-top: $height solid $color;
  }
}



/*****************************************************************************
 ** Working in ems can be annoying. Think in pixels by using this function  **
 ** $font-size is coming from _variables, base font size for all the things **
 ** em(#px)                                 **
 *****************************************************************************/
  
@function em($target, $context: $font-size) {
    @return ($target / $context) * 1em;
}


/*****************************************************************************
 ** line up to column on one side; edge of window on other
 *****************************************************************************/

@mixin right-edge-col($cols, $col-width) {

  $half-cols: $grid-columns / 2;
  @if $cols < $half-cols {
    margin-left: -($half-cols - $cols)*$col-width;
  } @else if $cols > $half-cols {
    margin-left: ($cols - $half-cols)*$col-width;
  }
  position: absolute;
  right: 0;
  left: 50%;
}

@mixin left-edge-col($cols, $col-width) {
  $half-cols: $grid-columns / 2;
  @if $cols < $half-cols {
    margin-right: ($half-cols - $cols)*$col-width;
  } @else if $cols > $half-cols {
    margin-right: -($cols - $half-cols)*$col-width;
  }
  position: absolute;
  left: 0;
  right: 50%;
}



@mixin keyframe ($animation_name) {
    @-webkit-keyframes #{$animation_name} {
        @content;
    }
 
    @-moz-keyframes #{$animation_name} {
        @content;
    }
 
    @-o-keyframes #{$animation_name} {
        @content;
    }
 
    @keyframes #{$animation_name} {
        @content;
    }
}


/*
    Example usage: 
    @include animation(10s, 5s, changecolour)
 */
@mixin animation ($delay, $duration, $animation) {
    -webkit-animation-delay: $delay;
    -webkit-animation-duration: $duration;
    -webkit-animation-name: $animation;
    -webkit-animation-fill-mode: forwards; /* this prevents the animation from restarting! */
 
    -moz-animation-delay: $delay;
    -moz-animation-duration: $duration;
    -moz-animation-name: $animation;
    -moz-animation-fill-mode: forwards; /* this prevents the animation from restarting! */
 
    -o-animation-delay: $delay;
    -o-animation-duration: $duration;
    -o-animation-name: $animation;
    -o-animation-fill-mode: forwards; /* this prevents the animation from restarting! */
 
    animation-delay: $delay;
    animation-duration: $duration;
    animation-name: $animation;
    animation-fill-mode: forwards; /* this prevents the animation from restarting! */
}

@mixin transform($value) {
  -webkit-transform: $value;
     -moz-transform: $value;
          transform: $value;
}